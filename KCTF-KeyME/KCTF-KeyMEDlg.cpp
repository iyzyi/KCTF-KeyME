
// KCTF-KeyMEDlg.cpp : 实现文件
//

#include "stdafx.h"
#include "KCTF-KeyME.h"
#include "KCTF-KeyMEDlg.h"
#include "afxdialogex.h"
#include "check.h"


#ifdef _DEBUG
#define new DEBUG_NEW
#include <conio.h>			// cprintf头文件
#endif



// TLS回调
void  WINAPI My_tls_callback(PVOID h, DWORD reason, PVOID pv)
{
	//MessageBoxA(NULL, "TLS", "TLS", MB_OK);
#ifdef _DEBUG
	_cprintf("TLS%d\n", 1);
#endif
	*(uint32_t*)(vm_data + 1122145) = 0xf496b3af; 					// QiXiVM中的vm_data中的第1122145个数据应该是0xf496b3af，为了迷惑参赛者，我改成了111 112 113 114，然后使用TLS改回来
}
#pragma comment(linker, "/INCLUDE:__tls_used")
#pragma section(".CRT$XLB",long,read)
extern "C" __declspec(allocate(".CRT$XLB")) PIMAGE_TLS_CALLBACK _xl_y = My_tls_callback;
#pragma comment(linker, "/INCLUDE:__xl_y")



// 用于应用程序“关于”菜单项的 CAboutDlg 对话框

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

// 对话框数据
#ifdef AFX_DESIGN_TIME
	enum { IDD = IDD_ABOUTBOX };
#endif

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 支持

// 实现
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialogEx(IDD_ABOUTBOX)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()


// CKCTFKeyMEDlg 对话框



CKCTFKeyMEDlg::CKCTFKeyMEDlg(CWnd* pParent /*=NULL*/)
	: CDialogEx(IDD_KCTFKEYME_DIALOG, pParent)
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void CKCTFKeyMEDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CKCTFKeyMEDlg, CDialogEx)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDCANCEL, &CKCTFKeyMEDlg::OnBnClickedCancel)
	ON_EN_CHANGE(IDC_EDIT2, &CKCTFKeyMEDlg::OnEnChangeEdit2)
	ON_BN_CLICKED(IDOK, &CKCTFKeyMEDlg::OnBnClickedOk)
	ON_BN_CLICKED(IDC_MFCLINK2, &CKCTFKeyMEDlg::OnBnClickedMfclink2)
END_MESSAGE_MAP()


// CKCTFKeyMEDlg 消息处理程序

BOOL CKCTFKeyMEDlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	// 将“关于...”菜单项添加到系统菜单中。

	// IDM_ABOUTBOX 必须在系统命令范围内。
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != NULL)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// 设置此对话框的图标。  当应用程序主窗口不是对话框时，框架将自动
	//  执行此操作
	SetIcon(m_hIcon, TRUE);			// 设置大图标
	SetIcon(m_hIcon, FALSE);		// 设置小图标

	// TODO: 在此添加额外的初始化代码

	return TRUE;  // 除非将焦点设置到控件，否则返回 TRUE
}

void CKCTFKeyMEDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialogEx::OnSysCommand(nID, lParam);
	}
}

// 如果向对话框添加最小化按钮，则需要下面的代码
//  来绘制该图标。  对于使用文档/视图模型的 MFC 应用程序，
//  这将由框架自动完成。

void CKCTFKeyMEDlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 用于绘制的设备上下文

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 使图标在工作区矩形中居中
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 绘制图标
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}

//当用户拖动最小化窗口时系统调用此函数取得光标
//显示。
HCURSOR CKCTFKeyMEDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}



void CKCTFKeyMEDlg::OnBnClickedCancel()
{
	// TODO: 在此添加控件通知处理程序代码
	CDialogEx::OnCancel();
}


void CKCTFKeyMEDlg::OnEnChangeEdit2()
{
	// TODO:  如果该控件是 RICHEDIT 控件，它将不
	// 发送此通知，除非重写 CDialogEx::OnInitDialog()
	// 函数并调用 CRichEditCtrl().SetEventMask()，
	// 同时将 ENM_CHANGE 标志“或”运算到掩码中。

	// TODO:  在此添加控件通知处理程序代码
}


void CKCTFKeyMEDlg::OnBnClickedOk()
{
	// TODO: 在此添加控件通知处理程序代码

	TCHAR t_user[256], t_serial_str[512];				// 调试推测这里可能是宽字符
	GetDlgItem(IDC_EDIT1)->GetWindowText(t_user, 256);
	GetDlgItem(IDC_EDIT2)->GetWindowText(t_serial_str, 512);

	//cprintf("%d", sizeof(t_user[0]));

	char user[256], serial_str[512];
	for (int i = 0; i < 256; i++)
		user[i] = (char)t_user[i];
	for (int i = 0; i < 512; i++)
		serial_str[i] = (char)t_serial_str[i];

#ifdef _DEBUG
	cprintf("user: %s\nserial_str: %s\n", user, serial_str);
#endif

	if (CheckSerial((char*)user, (char*)serial_str))
		MessageBox(TEXT("注册成功"), TEXT("注册成功"));
	else
		MessageBox(TEXT("注册失败"), TEXT("注册失败"));


	//CDialogEx::OnOK();
}


void CKCTFKeyMEDlg::OnBnClickedMfclink2()
{
	// TODO: 在此添加控件通知处理程序代码
}
